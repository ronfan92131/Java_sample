/*
101.a: node structure, insert , create tree with insert, inOrderTraversal

 */


class Node{
    int data;
    Node left;
    Node right;

    Node(int data){
        this.data = data;
        left = null;
        right = null;
    }
}

class Tree101 {

   // insert recursively
   public static Node insert(Node root, int data) {
        if(root == null) {return new Node(data);}

        if(root.data>=data) {
            root.left = insert(root.left, data);
        }else{
            root.right = insert(root.right, data);
        }
        return root;
    }


    public static void inOrderTraversal(Node root){
        if (root == null){return;}
        inOrderTraversal(root.left);
        print(root.data);
        inOrderTraversal(root.right);
    }

    public static void print(int data){
        System.out.printf(data + " ");
    }

    public static Node createTree(){
        Node root = null;
        root = insert(root, 5);
        root = insert(root, 3);
        root = insert(root, 1);
        root = insert(root, 14);
        root = insert(root, 7);
        root = insert(root, 6);

        return root;
    }

    public static void main(String[] args) {

        Node root = createTree();

        inOrderTraversal(root);
    }
}
