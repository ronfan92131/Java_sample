// HashMap, TreeMap, LinkedList, LinkedHashMap  
import java.util.*;
import java.lang.*;
import java.util.HashMap;

public class HashMap1 {

    // function to sort hashmap by values 
    public static HashMap<String, Integer> sortByValue(HashMap<String, Integer> hm)
    {
        // Create a list from elements of HashMap 
        List<Map.Entry<String, Integer> > list =
                new LinkedList<Map.Entry<String, Integer> >(hm.entrySet());

        // Sort the list 
        Collections.sort(list, new Comparator<Map.Entry<String, Integer> >() {
            public int compare(Map.Entry<String, Integer> o1,
                               Map.Entry<String, Integer> o2)
            {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });

        // put data from sorted list to hashmap  
        HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>();
        for (Map.Entry<String, Integer> aa : list) {
            temp.put(aa.getKey(), aa.getValue());
        }
        return temp;
    }

    // Driver Code 
    public static void main(String[] args)
    {
        HashMap<String, Integer> hm = new HashMap<String, Integer>();

        // enter data into hashmap 
        hm.put("Math", 98);
        hm.put("Data Structure", 95);
        hm.put("Database", 91);
        hm.put("Database", 75);  //test duplicate key, new value should replace old one
        hm.put("Java", 95);  //test if same value is ok for different key
        hm.put("Operating System", 79);
        hm.put("Networking", 80);

        Map<String, Integer> hm1 = sortByValue(hm);

        //
        TreeMap<String, Integer> tm = new TreeMap<String, Integer>();
        for ( String key : hm.keySet()){
            tm.put(key, hm.get(key));
        }

        //print hmSorted,
        // if key is string, treemap key order will be alphabetical
        // if key is integer, treemap key order sequential, but if two subjects have the same score,
        // the firt subject will be replaced by the second subject. hence be careful to use integer as key,
        // if duplciate score, some info will be misssed!
        for (String key : tm.keySet()){
            System.out.println( key  + "  :   " + tm.get(key));
        }

        // print the sorted hashmap
        for (Map.Entry<String, Integer> en : hm1.entrySet()) {
            System.out.println("Key = " + en.getKey() +
                    ", Value = " + en.getValue());
        }

    }
} 
