/*
Tree: Inorder
Traversal
Complete the inOrder function in your editor below, which has parameter: a pointer to the root of a
binary tree. It must print the values in the tree's inorder traversal as a single line of space-separated
values.
Input Format
Our hidden tester code passes the root node of a binary tree to your inOrder function.
Constraints
1 Nodes in the tree 500
Output Format
Print the tree's inorder traversal as a single line of space-separated values.
 */

class Node{
    int data;
    Node left;
    Node right;

    Node(int data){
        this.data = data;
        left = null;
        right = null;
    }
}

class Tree2 {

    public static Node insert(Node root, int data) {
        if(root == null) {return new Node(data);}

        if(root.data>=data) {
            root.left = insert(root.left, data);
        }else{
            root.right = insert(root.right, data);
        }
        return root;
    }


    public static void inorder(Node root){
        if (root == null){return;}
        inorder(root.left);
        print(root.data);
        inorder(root.right);
    }

    public static void print(int data){
        System.out.printf(data + " ");
    }

    public static Node createTree(){
        Node root = null;
        root = insert(root, 5);
        root = insert(root, 3);
        root = insert(root, 1);
        root = insert(root, 14);
        root = insert(root, 7);
        root = insert(root, 6);

        return root;
    }

    public static void main(String[] args) {

        Node root = createTree();

        inorder(root);
    }
}
