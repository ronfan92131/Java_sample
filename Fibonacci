import java.io.*;
import java.util.*;

/*
fibo directly big-O: O(2^n), my mac can't handle when n>50
fibo with memo, big-O: O(N), blinking fast even n = 100

so, this is a bog concern, particularly when recursive.
a little bit of memory (to save the intermiteetn result in an array) trade foa huge time performance gain
 */

class Fibonacci {
    public static void main(String[] args) throws IOException {

        int n = 30;
        long[] arr = new long[n+1];
        //System.out.printf("n: " + n + " fib: " + fib(n) + "\n");
        System.out.printf("n: " + n + " fib_memo: " + fib_memo(n, arr) + "\n");

    }

    static long fib(int n){
        int r = 0;
        if (n == 0){return 0;}
        if (n == 1){return 1;}

        return fib(n-1) + fib(n-2);
    }

    static long fib_memo(int n, long[] arr){

        if (n == 0){return 0;}
        if (n == 1){return 1;}

        if(arr[n] != 0){return arr[n];}
        arr[n] = fib_memo(n-1, arr) + fib_memo(n-2, arr);

        return arr[n];
    }

}
